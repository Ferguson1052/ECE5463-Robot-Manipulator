%% Environemnt Initialization
% Load Robot
%robot = loadrobot("frankaEmikaPanda",DataFormat="column");
robot = loadrobot('kinovaGen3', 'DataFormat', 'column', Gravity=[0 0 -9.81]);
showdetails(robot)

numJoints = numel(homeConfiguration(robot));


endEffector = "EndEffector_Link"; 


% Initial end-effector pose
taskInit = trvec2tform([-0.2 -0.2 0.9])*axang2tform([0 1 0 pi]);

% Compute current robot joint configuration using inverse kinematics
ik = inverseKinematics('RigidBodyTree', robot);
ik.SolverParameters.AllowRandomRestart = false;
weights = [1 1 1 1 1 1];
currentRobotJConfig = ik(endEffector, taskInit, weights, robot.homeConfiguration);

% The IK solver respects joint limits, but for those joints with infinite
% range, they must be wrapped to a finite range on the interval [-pi, pi].
% Since the other joints are already bounded within this range, it is
% sufficient to simply call wrapToPi on the entire robot configuration
% rather than only on the joints with infinite range.
currentRobotJConfig = wrapToPi(currentRobotJConfig);

% Final (desired) end-effector pose
taskFinal = trvec2tform([0.0 0.3 0.0])*axang2tform([0 1 0 pi]);  
anglesFinal = rotm2eul(taskFinal(1:3,1:3),'XYZ');
poseFinal = [taskFinal(1:3,4);anglesFinal']; % 6x1 vector for final pose: [x, y, z, phi, theta, psi]


isMovingObst = true;


helperCreateObstaclesKINOVA;


x0 = [currentRobotJConfig', zeros(1,numJoints)];
helperInitialVisualizerKINOVA;


safetyDistance = 1.0; 


helperDesignNLMPCobjKINOVA;


maxIters = 50;
u0 = zeros(1,numJoints);
mv = u0;
time = 0;
goalReached = false;


positions = zeros(numJoints,maxIters);
positions(:,1) = x0(1:numJoints)';

velocities = zeros(numJoints,maxIters);
velocities(:,1) = x0(numJoints+1:end)';

accelerations = zeros(numJoints,maxIters);
accelerations(:,1) = u0';

timestamp = zeros(1,maxIters);
timestamp(:,1) = time;


options = nlmpcmoveopt;
for timestep=1:maxIters
    disp(['Calculating control at timestep ', num2str(timestep)]);
    % Optimize next trajectory point 
    [mv,options,info] = nlmpcmove(nlobj,x0,mv,[],[], options);
    if info.ExitFlag < 0
        disp('Failed to compute a feasible trajectory. Aborting...')
        break;
    end
    % Update states and time for next iteration
    x0 = info.Xopt(2,:);
    time = time + nlobj.Ts;
    % Store trajectory points
    positions(:,timestep+1) = x0(1:numJoints)';
    velocities(:,timestep+1) = x0(numJoints+1:end)';
    accelerations(:,timestep+1) = info.MVopt(2,:)';
    timestamp(timestep+1) = time;
    % Check if goal is achieved 
    helperCheckGoalReachedKINOVA;
    if goalReached
        break;
    end
    % Update obstacle pose if it is moving
    if isMovingObst
        helperUpdateMovingObstaclesKINOVA;
    end
end


tFinal = timestep+1;
positions = positions(:,1:tFinal);
velocities = velocities(:,1:tFinal);
accelerations = accelerations(:,1:tFinal);
timestamp = timestamp(:,1:tFinal);

visTimeStep = 0.05;


motionModel = jointSpaceMotionModel('RigidBodyTree',robot);

% Control robot to target trajectory points in simulation using low-fidelity model
initState = [positions(:,1);velocities(:,1)];
targetStates = [positions;velocities;accelerations]';    
[t,robotStates] = ode15s(@(t,state) helperTimeBasedStateInputsKINOVA(motionModel,timestamp,targetStates,t,state),...
[timestamp(1):visTimeStep:timestamp(end)],initState);


helperFinalVisualizerKINOVA;

%visuals = "on";
%collisions = "on";
%show3D(scenario,Visuals=visuals,Collisions=collisions);
%title("Scene with collision object-based static meshes")
%view(90,0)
%light
%hold on

% Assuming the following variables contain the data to plot:
% - positions: matrix of joint positions
% - velocities: matrix of joint velocities
% - accelerations: matrix of joint accelerations
% - timestamp: array of time stamps

% Plot joint positions in a separate figure
figure;
plot(timestamp, positions, 'LineWidth', 1.5);
xlabel('Time (s)');
ylabel('Joint Position (rad)');
title('Joint Positions Over Time');
grid on;
legend(arrayfun(@(x) ['Joint ' num2str(x)], 1:size(positions, 1), 'UniformOutput', false));
hold off;

% Plot joint velocities in a separate figure
figure;
plot(timestamp, velocities, 'LineWidth', 1.5);
xlabel('Time (s)');
ylabel('Joint Velocity (rad/s)');
title('Joint Velocities Over Time');
grid on;
legend(arrayfun(@(x) ['Joint ' num2str(x)], 1:size(velocities, 1), 'UniformOutput', false));
hold off;

% Plot joint accelerations in a separate figure
figure;
plot(timestamp, accelerations, 'LineWidth', 1.5);
xlabel('Time (s)');
ylabel('Joint Acceleration (rad/s^2)');
title('Joint Accelerations Over Time');
grid on;
legend(arrayfun(@(x) ['Joint ' num2str(x)], 1:size(accelerations, 1), 'UniformOutput', false));
hold off;

% Given data: timestamp, positions, velocities, accelerations

% Degree of the polynomial for curve fitting
polyDegree = 5; % Adjust as needed

% Joint position best-fit curve
positionFit = zeros(numJoints, polyDegree + 1);
for i = 1:numJoints
    positionFit(i, :) = polyfit(timestamp, positions(i, :), polyDegree);
end

% Joint velocity best-fit curve
velocityFit = zeros(numJoints, polyDegree + 1);
for i = 1:numJoints
    velocityFit(i, :) = polyfit(timestamp, velocities(i, :), polyDegree);
end

% Joint acceleration best-fit curve
accelerationFit = zeros(numJoints, polyDegree + 1);
for i = 1:numJoints
    accelerationFit(i, :) = polyfit(timestamp, accelerations(i, :), polyDegree);
end

% Generate fitted curves
tFine = linspace(min(timestamp), max(timestamp), 100); % Fine-grained time array

positionFitted = zeros(numJoints, numel(tFine));
velocityFitted = zeros(numJoints, numel(tFine));
accelerationFitted = zeros(numJoints, numel(tFine));

for i = 1:numJoints
    positionFitted(i, :) = polyval(positionFit(i, :), tFine);
    velocityFitted(i, :) = polyval(velocityFit(i, :), tFine);
    accelerationFitted(i, :) = polyval(accelerationFit(i, :), tFine);
end

% Plot position with best-fit curves
figure;
for i = 1:numJoints
    plot(tFine, positionFitted(i, :), 'LineWidth', 1.5);
    hold on;
end
xlabel('Time (s)');
ylabel('Joint Position (rad)');
title('Joint Position Curve Fit');
grid on;
legend(arrayfun(@(x) ['Joint ' num2str(x)], 1:numJoints, 'UniformOutput', false));
hold off;

% Plot velocity with best-fit curves
figure;
for i = 1:numJoints
    plot(tFine, velocityFitted(i, :), 'LineWidth', 1.5);
    hold on;
end
xlabel('Time (s)');
ylabel('Velocity Position (rad/s)');
title('Joint Velocity Curve Fit');
grid on;
legend(arrayfun(@(x) ['Joint ' num2str(x)], 1:numJoints, 'UniformOutput', false));
hold off;

% Plot acceleration with best-fit curves
figure;
for i = 1:numJoints
    plot(tFine, accelerationFitted(i, :), 'LineWidth', 1.5);
    hold on;
end
xlabel('Time (s)');
ylabel('Acceleration Position (rad/s^2)');
title('Joint Acceleration Curve Fit');
grid on;
legend(arrayfun(@(x) ['Joint ' num2str(x)], 1:numJoints, 'UniformOutput', false));
hold off;


% Calculate joint torques
jointTorques = jointTorq(robot, positions, velocities, accelerations);

% Plot joint torques
figure;
plot(timestamp, jointTorques, 'LineWidth', 1.5);
xlabel('Time (s)');
ylabel('Joint Torque (Nm)');
title('Joint Torques Over Time');
grid on;
legend(arrayfun(@(x) ['Joint ' num2str(x)], 1:size(jointTorques, 1), 'UniformOutput', false));


function jointTorques = jointTorq(robot, positions, velocities, accelerations)
    % Initialize output matrix for joint torques
    numJoints = size(positions, 1);
    numTimeSteps = size(positions, 2);
    jointTorques = zeros(numJoints, numTimeSteps);
    
    % Loop through each time step to compute joint torques
    for t = 1:numTimeSteps
        % Get joint configurations
        jointConfig = positions(:, t);
        jointVelocity = velocities(:, t);
        jointAcceleration = accelerations(:, t);

        % Compute joint torques using inverse dynamics
        torques = inverseDynamics(robot, jointConfig, jointVelocity, jointAcceleration);

        % Store joint torques in the output matrix
        jointTorques(:, t) = torques;
    end
end
