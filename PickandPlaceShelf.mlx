% Create Scene with Collision-Object-Based Static Meshes
scenario = robotScenario(UpdateRate=10);
% Create a static surface structure representing a table by using scenario meshes fitted with collision objects. The surface structure acts as an obstacle in the scenario.
addMesh(scenario,"Box",Position=[0.7 0.05 0.2],Size=[0.5 0.9 0.05],Color=[0.7 0.7 0.5],Collision="mesh")
addMesh(scenario,"Box",Position=[0.3 -0.6 0.2],Size=[1.3 0.4 0.235],Color=[0.7 0.7 0.5],Collision="mesh")
addMesh(scenario,"Box",Position=[0.55 -0.25 0.4],Size=[0.8 0.03 0.35],Color=[0.7 0.7 0.7],Collision="mesh")
addMesh(scenario,"Box",Position=[0.8 0.25 0.4],Size=[0.3 0.03 0.35],Color=[0.7 0.7 0.7],Collision="mesh")
addMesh(scenario,"Box",Position=[0.8 0 0.59],Size=[0.3 0.53 0.03],Color=[0.7 0.7 0.7],Collision="mesh")
% Place two boxes on the table with collision-object-fitted scenario meshes. The two boxes are static meshes that act as obstacles and cannot attach to a robotPlatform object.
addMesh(scenario,"Box",Position=[0.85 -0.05 0.278],Size=[0.06 0.06 0.1],Color=[1 0.5 0.25],Collision="mesh")
addMesh(scenario,"Box",Position=[0.65 -0.1 0.278],Size=[0.06 0.06 0.1],Color=[1 0.5 0.25],Collision="mesh")
% Visualize the visual meshes and collision meshes in the scenario by specifying the Visuals and Collisions name-value arguments.
visuals = "on";
collisions = "off";
show3D(scenario,Visuals=visuals,Collisions=collisions);
title("Scene with collision object-based static meshes")
view(81,19)
light


% Add Manipulator to Scenario
[franka,endEffectorName] = exampleHelperLoadFrankaScenario;
% Create a robotPlatform object with the frankaEmikaPanda robot model.
robot = robotPlatform("Manipulator",scenario,RigidBodyTree=franka,ReferenceFrame="ENU");
% Obtain and update the initial joint configuration.
initialConfig = homeConfiguration(robot.RigidBodyTree);
initialConfig(7) = 0.65;
initialConfig(6) = 0.75;


% Add Box for Manipulation
boxToMove = robotPlatform("Box",scenario,Collision="mesh",InitialBasePosition=[0.75 0.1 0.278]);
% Update the properties of the movable mesh.
updateMesh(boxToMove,"Cuboid",Collision="mesh",Size=[0.06 0.06 0.1],Color=[0.9 0.0 0.0]);
% Set up the scene and move the manipulator robotPlatform to the initial joint configuration.
setup(scenario)
move(robot,"joint",initialConfig)
% Visualize the scenario.
ax = show3D(scenario,Visuals=visuals,Collisions=collisions);
title("Scene with static meshes and robot platform")
view(81,19)
light

% Plan and Move Manipulator Gripper to Pick-Up Location
planner = manipulatorRRT(robot.RigidBodyTree,scenario.CollisionMeshes);
planner.MaxConnectionDistance = 0.4;
planner.ValidationDistance = 0.1;
planner.SkippedSelfCollisions = "parent";
% Specify a pick-up joint configuration for the manipulator based on the target box location.
pickUpConfig = [0.2371 -0.0200 0.0542 -2.2272 0.0013 2.2072 -0.9670 0.0400 0.0400];
% Plan a path as a series of waypoints and interpolate between the waypoints to visualize the intermediate configurations of the planned motion.
rng("default")
path = plan(planner,initialConfig,pickUpConfig);
% Number of interpolations between each adjacent configuration.
numState = 10;
interpStates = interpolate(planner,path,numState);
% Visualize scene
show3D(scenario,FastUpdate=true,Parent=ax,Visuals=visuals,Collisions=collisions);
title("Approaching towards pick-up location")
% Move the manipulator based on the planned state, and visualize each state in the scenario.
for idx = 1:size(interpStates,1)
    % Get current joint configuration.
    jointConfig = interpStates(idx,:);

    % Move manipulator with current joint configuration.
    move(robot,"joint",jointConfig)

    % Use fast update to move platform visualization frames.
    show3D(scenario,FastUpdate=true,Parent=ax,Visuals=visuals,Collisions=collisions);

    % Get robot end effector pose. Draw trajectory.
    hold on
    poseNow = scenario.TransformTree.getTransform(robot.ReferenceFrame,robot.Name + "_" + endEffectorName);
    jointSpaceMarker = plot3(poseNow(1,4),poseNow(2,4),poseNow(3,4),"b.",MarkerSize=12);
    drawnow
    hold off

    % Advance scenario simulation time.
    advance(scenario);
end


% Pick Up Target Box with Manipulator Gripper
% Attach the target box to the rigidBodyTree of the manipulator by using a transform to simulate the pick-up action.
attach(robot,"Box",endEffectorName,ChildToParentTransform=trvec2tform([0.0 0.0 0.1]))
% Visualize the scenario.
show3D(scenario,FastUpdate=true,Parent=ax,Visuals=visuals,Collisions=collisions);
title("Picked-up target box")


% Plan Manipulator Motion Between Pick-Up and Drop Locations
dropConfig = [-0.6564 0.2885 -0.3187 -1.5941 0.1103 1.8678 -0.2344 0.04 0.04];
planner = manipulatorRRT(robot.RigidBodyTree,scenario.CollisionMeshes);
planner.MaxConnectionDistance = 0.4;
planner.ValidationDistance = 0.1;
planner.SkippedSelfCollisions = "parent";
% Plan a path as a series of waypoints and interpolate between the waypoints to visualize the intermediate configurations of the planned motion.
path = plan(planner,pickUpConfig,dropConfig);
interpStates = interpolate(planner,path,numState);
% Visualize scene
show3D(scenario,FastUpdate=true,Parent=ax,Visuals=visuals,Collisions=collisions);
title("Approaching towards drop location")
% Move the manipulator based on the planned state, and visualize each state in the scenario.
for idx = 1:size(interpStates,1)
    % Get current joint configuration.
    jointConfig = interpStates(idx,:);

    % Move manipulator with current joint configuration.
    move(robot,"joint",jointConfig)

    % Use fast update to move platform visualization frames.
    show3D(scenario,FastUpdate=true,Parent=ax,Visuals=visuals,Collisions=collisions);

    % Get robot end effector pose. Draw trajectory.
    hold on
    poseNow = scenario.TransformTree.getTransform(robot.ReferenceFrame,robot.Name + "_" + endEffectorName);
    jointSpaceMarker = plot3(poseNow(1,4),poseNow(2,4),poseNow(3,4),"r.",MarkerSize=12);
    drawnow
    hold off
    
    % Advance scenario simulation time.
    advance(scenario);
end


% Place Target Box at Drop Location
detach(robot)
% Visualize the scenario.
show3D(scenario,FastUpdate=true,Parent=ax,Visuals=visuals,Collisions=collisions);
title("Placed target box at drop location")

% Plan Manipulator Motion Between Drop Location and Home Configuration
planner = manipulatorRRT(robot.RigidBodyTree,scenario.CollisionMeshes);
planner.MaxConnectionDistance = 0.4;
planner.ValidationDistance = 0.1;
planner.SkippedSelfCollisions = "parent";
% Plan a path as a series of waypoints and interpolate between the waypoints to visualize the intermediate configurations of the planned motion.
path = plan(planner,dropConfig,initialConfig);
interpStates = interpolate(planner,path,numState);
% Visualize scene
show3D(scenario,FastUpdate=true,Parent=ax,Visuals=visuals,Collisions=collisions);
title("Approaching towards home configuration")
% Move the manipulator based on the planned state, and visualize each state in the scenario.
for idx = 1:size(interpStates,1)
    % Get current joint configuration.
    jointConfig = interpStates(idx,:);

    % Move manipulator with current joint configuration.
    move(robot,"joint",jointConfig)

    % Use fast update to move platform visualization frames.
    show3D(scenario,FastUpdate=true,Parent=ax,Visuals=visuals,Collisions=collisions);

    % Get robot end effector pose. Draw trajectory.
    hold on
    poseNow = scenario.TransformTree.getTransform(robot.ReferenceFrame,robot.Name + "_" + endEffectorName);
    jointSpaceMarker = plot3(poseNow(1,4),poseNow(2,4),poseNow(3,4),"g.",MarkerSize=12);
    drawnow
    hold off
    
    % Advance scenario simulation time.
    advance(scenario);
end
